# parcing syntax: "<__>" - non-terminals, "{::}" - new line, "{:_____:}" - indentation

# Initialization, no branching
<S> ::= <init>{::}<call>
<init> ::= import numpy as np{::}import src{::}import utils{::}<params>{::}def ge():{:X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)]){::}[Xi.initRandom() for Xi in X]{::}f = my_func([Xi.x for Xi in X]){::}[X[i].setFitness(f[i]) for i in range(n)]{::}for it in range(iteration):{:<main>:}{::}return X:}

# parameters
<params> ::= utils.IRACE = True{::}utils.modifier = <mod>{::}n = 500{::}iteration = 59{::}my_func = utils.evaluate{::}dimension = 2{::}bounds = 0, 1{::}beta = <beta>{::}pr = <pr>{::}w = <w>{::}c1 = <c1>{::}c2 = <c2>{::}pa = <pr>{::}dp = <pr>{::}

# branching starts here
<main> ::= <ModificationRound> |<ModificationRound>{::}<DropRound>

<ModificationRound> ::= <step> | <step>{::}<step> 
<step> ::= U = <operator>(X, <sel>, <mut>, <cross>){::}f = my_func([Ui.x for Ui in U]){::}[U[i].setFitness(f[i]) for i in range(n)]{::}X = <output>

# producing different versions of U
<operator> ::= <de> | <pso>
<de> ::= src.op.op_de 
<pso> ::= src.op.op_pso
	
<sel> ::= <random>
<random> ::= src.op.select_random 

<cross> ::= src.op.crx_exponential | src.op.crx_blend

<mut> ::= src.op.mut_de | src.op.mut_pso | src.op.mut_cs

# ways to choose between X and U
<output> ::= <choose_all> | <replace_if_better> | <replace_if_random>
<choose_all> ::= U 
<replace_if_better> ::= src.op.replace_if_best(X, U) 
<replace_if_random> ::= src.op.replace_if_random(X, U)

<DropRound> ::= <DropRandom>|<DropWorst>|<DropOld>
<DropRandom> ::= X = src.op.drop_probability(X){::} 
<DropWorst> ::= X = src.op.drop_worst(X){::}
<DropOld> ::= pass 

<n>    ::= 50   | 100  | 200  | 400  | 750  | 1500
<w>    ::= 0.00 | 0.25 | 0.50 | 0.75 | 1.00 | 2.00
<c1>   ::= 0.00 | 0.25 | 0.50 | 0.75 | 1.00 | 2.00
<c2>   ::= 0.00 | 0.25 | 0.50 | 0.75 | 1.00 | 2.00
<pr>   ::= 0.10 | 0.25 | 0.50 | 0.75 | 1.00
<beta> ::= 0.00 | 0.25 | 0.50 | 0.75 | 1.00
<mod>  ::= 0.00 | 0.25 | 0.50 | 0.75 | 1.00 | 2.00 | 3.00 | 4.00 | 5.00


<call> ::= ge(){::}XXX_output_XXX = src.solution.best.getFitness()