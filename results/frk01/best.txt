Generation:
30

Phenotype:
import numpy as np
import src
import utils
utils.IRACE = True
utils.modifier = 0.25
n = 100
iteration = 9
my_func = utils.evaluate
dimension = 2
bounds = 0, 1
beta = 0.00
pr = 0.50
w = 0.50
c1 = 2.00
c2 = 2.00
pa = 0.10
dp = 0.25
def ge():
  X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)])
  [Xi.initRandom() for Xi in X]
  f = my_func([Xi.x for Xi in X])
  [X[i].setFitness(f[i]) for i in range(n)]
  for it in range(iteration):
    U = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_exponential)
    f = my_func([Ui.x for Ui in U])
    [U[i].setFitness(f[i]) for i in range(n)]
    X = U
    U = src.op.op_de(X, src.op.select_random, src.op.mut_cs, src.op.crx_blend)
    f = my_func([Ui.x for Ui in U])
    [U[i].setFitness(f[i]) for i in range(n)]
    X = U
  return X
ge()
XXX_output_XXX = src.solution.best.getFitness()

Genotype:
[914, 307, 998, 865, 575, 147, 470, 797, 527, 580, 16, 314, 199, 389, 899, 860, 884, 974, 64, 590, 909, 524, 236, 26, 757, 701, 700, 497, 611, 489, 614, 961, 970, 235, 915, 134, 715, 467, 199, 557, 856, 747, 506, 898, 700, 601, 87, 276]
Tree:
(<S> (<init> import numpy as np{::}import src{::}import utils{::} (<params> utils.IRACE = True{::}utils.modifier =  (<mod> 0.25) {::}n = 100{::}iteration = 9{::}my_func = utils.evaluate{::}dimension = 2{::}bounds = 0, 1{::}beta =  (<beta> 0.00) {::}pr =  (<pr> 0.50) {::}w =  (<w> 0.50) {::}c1 =  (<c1> 2.00) {::}c2 =  (<c2> 2.00) {::}pa =  (<pr> 0.10) {::}dp =  (<pr> 0.25) {::}) {::}def ge():{:X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)]){::}[Xi.initRandom() for Xi in X]{::}f = my_func([Xi.x for Xi in X]){::}[X[i].setFitness(f[i]) for i in range(n)]{::}for it in range(iteration):{: (<main> (<ModificationRound> (<step> U =  (<operator> (<pso> src.op.op_pso)) (X,  (<sel> (<random> src.op.select_random)) ,  (<mut> src.op.mut_pso) ,  (<cross> src.op.crx_exponential) ){::}f = my_func([Ui.x for Ui in U]){::}[U[i].setFitness(f[i]) for i in range(n)]{::}X =  (<output> (<choose_all> U))) {::} (<step> U =  (<operator> (<de> src.op.op_de)) (X,  (<sel> (<random> src.op.select_random)) ,  (<mut> src.op.mut_cs) ,  (<cross> src.op.crx_blend) ){::}f = my_func([Ui.x for Ui in U]){::}[U[i].setFitness(f[i]) for i in range(n)]{::}X =  (<output> (<choose_all> U))))) :}{::}return X:}) {::} (<call> ge(){::}XXX_output_XXX = src.solution.best.getFitness()))

Fitness:
-0.98000002