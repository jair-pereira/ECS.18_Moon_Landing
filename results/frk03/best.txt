Generation:
30

Phenotype:
import numpy as np
import src
import utils
utils.IRACE = True
utils.modifier = 2.00
n = 100
iteration = 9
my_func = utils.evaluate
dimension = 2
bounds = 0, 1
beta = 0.75
pr = 0.75
w = 1.00
c1 = 2.00
c2 = 0.75
pa = 0.10
dp = 0.25
def ge():
  X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)])
  [Xi.initRandom() for Xi in X]
  f = my_func([Xi.x for Xi in X])
  [X[i].setFitness(f[i]) for i in range(n)]
  for it in range(iteration):
    U = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_blend)
    f = my_func([Ui.x for Ui in U])
    [U[i].setFitness(f[i]) for i in range(n)]
    X = U
    U = src.op.op_pso(X, src.op.select_random, src.op.mut_pso, src.op.crx_blend)
    f = my_func([Ui.x for Ui in U])
    [U[i].setFitness(f[i]) for i in range(n)]
    X = src.op.replace_if_best(X, U)
  return X
ge()
XXX_output_XXX = src.solution.best.getFitness()

Genotype:
[990, 269, 652, 149, 548, 698, 394, 743, 225, 810, 761, 71, 527, 855, 539, 412, 788, 356, 610, 77, 135, 869, 685, 681, 332, 651, 682, 106, 561, 22, 503, 27, 346, 323, 166, 721, 58, 218, 533, 807, 130, 572, 283, 215, 18, 17, 225, 327]
Tree:
(<S> (<init> import numpy as np{::}import src{::}import utils{::} (<params> utils.IRACE = True{::}utils.modifier =  (<mod> 2.00) {::}n = 100{::}iteration = 9{::}my_func = utils.evaluate{::}dimension = 2{::}bounds = 0, 1{::}beta =  (<beta> 0.75) {::}pr =  (<pr> 0.75) {::}w =  (<w> 1.00) {::}c1 =  (<c1> 2.00) {::}c2 =  (<c2> 0.75) {::}pa =  (<pr> 0.10) {::}dp =  (<pr> 0.25) {::}) {::}def ge():{:X = np.array([src.solution(my_func, dimension, bounds) for i in range(n)]){::}[Xi.initRandom() for Xi in X]{::}f = my_func([Xi.x for Xi in X]){::}[X[i].setFitness(f[i]) for i in range(n)]{::}for it in range(iteration):{: (<main> (<ModificationRound> (<step> U =  (<operator> (<pso> src.op.op_pso)) (X,  (<sel> (<random> src.op.select_random)) ,  (<mut> src.op.mut_pso) ,  (<cross> src.op.crx_blend) ){::}f = my_func([Ui.x for Ui in U]){::}[U[i].setFitness(f[i]) for i in range(n)]{::}X =  (<output> (<choose_all> U))) {::} (<step> U =  (<operator> (<pso> src.op.op_pso)) (X,  (<sel> (<random> src.op.select_random)) ,  (<mut> src.op.mut_pso) ,  (<cross> src.op.crx_blend) ){::}f = my_func([Ui.x for Ui in U]){::}[U[i].setFitness(f[i]) for i in range(n)]{::}X =  (<output> (<replace_if_better> src.op.replace_if_best(X, U)))))) :}{::}return X:}) {::} (<call> ge(){::}XXX_output_XXX = src.solution.best.getFitness()))

Fitness:
-0.98000002